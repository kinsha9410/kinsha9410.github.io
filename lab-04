# kinsha9410.github.io
github page

import tensorflow as tf
import numpy as np

tf.enable_eager_execution()
tf.__version__

# Random
tf.set_random_seed(0) # for reproductubility random_seed를 초기화 시켜 다음에 재현해도 동일하게 재현시킬 수 있도록 한다.

# data and label
x1 = [ 73.,  93.,  89.,  96.,  73.]  # x데이터와 Y데이터값을 지정
x2 = [ 80.,  88.,  91.,  98.,  66.]
x3 = [ 75.,  93.,  90., 100.,  70.]
Y  = [152., 185., 180., 196., 142.]

# random weights
w1 = tf.Variable(tf.random_normal([1]))    # 초기값을 1로 지정 초기값은 아무 값이나 줘도 상관 없음
w2 = tf.Variable(tf.random_normal([1])) 
w3 = tf.Variable(tf.random_normal([1]))
b  = tf.Variable(tf.random_normal([1]))

learning_rate = 0.000001                # learning_rate는 작은 값 지정

for i in range(1000+1): # 업데이트를 1001번 한다
    # tf.GradientTape() to record the gradient of the cost function
    with tf.GradientTape() as tape:      #GradientTape을 사용하여 구현
        hypothesis = w1 * x1 +  w2 * x2 + w3 * x3 + b        # 가설값
        cost = tf.reduce_mean(tf.square(hypothesis - Y))      # 가설에서 실제값을 뺸 오차 제곱의 평균 값 = cost
    # calculates the gradients of the cost
    w1_grad, w2_grad, w3_grad, b_grad = tape.gradient(cost, [w1, w2, w3, b]) # 변수들의 대한 기울기 값을 구한다.
    
    # update w1,w2,w3 and b
    w1.assign_sub(learning_rate * w1_grad)        # 4개의 grad 값을 learning_rate를 곱한후 업데이트
    w2.assign_sub(learning_rate * w2_grad)
    w3.assign_sub(learning_rate * w3_grad)
    b.assign_sub(learning_rate * b_grad)

    if i % 50 == 0:   # 50번에 1번씩 출력
      print("{:5} | {:12.4f}".format(i, cost.numpy()))
    
#    i       cost
    0 |   11325.9121
   50 |     135.3618            # cost 값이 급격히 줄어든후 거의 일정함
  100 |      11.1817
  150 |       9.7940
  200 |       9.7687
  250 |       9.7587
  300 |       9.7489
  350 |       9.7389
  400 |       9.7292
  450 |       9.7194
  500 |       9.7096
  550 |       9.6999
  600 |       9.6903
  650 |       9.6806
  700 |       9.6709
  750 |       9.6612
  800 |       9.6517
  850 |       9.6421
  900 |       9.6325
  950 |       9.6229
 1000 |       9.6134

# Matrix
 data = np.array([
    # X1,   X2,    X3,   y
    [ 73.,  80.,  75., 152. ],
    [ 93.,  88.,  93., 185. ],
    [ 89.,  91.,  90., 180. ],
    [ 96.,  98., 100., 196. ],
    [ 73.,  66.,  70., 142. ]
], dtype=np.float32)

# slice data
X = data[:, :-1]    # numpy의 슬라이싱을 활용하여 데이터를 잘라냄, 마지막 :를 제외한 X는 5행 3열짜리 matrix
y = data[:, [-1]]   # Y는 마지막 :

W = tf.Variable(tf.random_normal([3, 1])) # X값에 :(변수) 가 3개이 이므로 행은 3 출력값은 1
b = tf.Variable(tf.random_normal([1]))    # b는 하나 

learning_rate = 0.000001           # learning_rate 작은 값으로 지정

# hypothesis, prediction function
def predict(X):         #우리의 예측함수는 다음과 같다
    return tf.matmul(X, W) + b   

print("epoch | cost")

n_epochs = 2000        
for i in range(n_epochs+1): # 총 2001 번 epochs가 진행됨
    # tf.GradientTape() to record the gradient of the cost function
    with tf.GradientTape() as tape:
        cost = tf.reduce_mean((tf.square(predict(X) - y)))

    # calculates the gradients of the loss
    W_grad, b_grad = tape.gradient(cost, [W, b])

    # updates parameters (W and b)
    W.assign_sub(learning_rate * W_grad)    # W와 b 값을 지속적으로 업데이트
    b.assign_sub(learning_rate * b_grad)
    
    if i % 100 == 0:
        print("{:5} | {:10.4f}".format(i, cost.numpy()))
        
           
   epoch | cost
    0 |  5455.5903                         #처음 큰 값의 cost로 시작하여 3.9부터 거의 줄어들지 않게 
  100 |    31.7443
  200 |    30.9326
  300 |    30.7894
  400 |    30.6468
  500 |    30.5055
  600 |    30.3644
  700 |    30.2242
  800 |    30.0849
  900 |    29.9463
 1000 |    29.8081
 1100 |    29.6710
 1200 |    29.5348
 1300 |    29.3989
 1400 |    29.2641
 1500 |    29.1299
 1600 |    28.9961
 1700 |    28.8634
 1800 |    28.7313
 1900 |    28.5997
 2000 |    28.4689
